<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

<!--    扫描组件，除了controller组件-->
    <context:component-scan base-package="com.atguigu.crud">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 引入jdbc.properties -->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>

    <!-- 配置Druid数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}" ></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 开启事务的注解驱动，
    注意annotation-driven是tx结尾的，transaction-manager的id是以下的默认值，可以不写
     将使用了@Transactional标识的方法或类中所有的方法进行事务管理-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

<!--    &lt;!&ndash;开启事务，使用xml配置形式的事务（主要的都是使用配置式）  &ndash;&gt;-->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 切入点表达式 &ndash;&gt;-->
<!--        <aop:pointcut expression="execution(* com.atguigu.crud.service..*(..))" id="txPoint"/>-->
<!--        &lt;!&ndash; 配置事务增强 &ndash;&gt;-->
<!--        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>-->
<!--    </aop:config>-->

<!--    &lt;!&ndash;配置事务增强，事务如何切入  &ndash;&gt;-->
<!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash; 所有方法都是事务方法 &ndash;&gt;-->
<!--            <tx:method name="*"/>-->
<!--            &lt;!&ndash;以get开始的所有方法  &ndash;&gt;-->
<!--            <tx:method name="get*" read-only="true"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->

    <!-- 配置用于创建SqlSessionFactory的工厂bean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 设置MyBatis配置文件的路径（可以不设置） -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- 设置数据源 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- 设置类型别名所对应的包 -->
        <property name="typeAliasesPackage" value="com.atguigu.crud.pojo"></property>
<!--        &lt;!&ndash;设置映射文件的路径，只有映射文件所在路径和mapper接口所在路径一致，
            ！！并且设置了MapperScannerConfigurer的bean后，才能不设置以下映射文件的路径&ndash;&gt;-->
<!--        <property name="mapperLocations" value="classpath:mappers-other/*.xml"></property>-->
    </bean>

    <!--配置mapper接口的扫描配置由mybatis-spring提供，可以将指定包下所有的
    mapper接口创建动态代理并将这些动态代理作为IOC容器的bean管理，
    即在Java的service中可以直接装配mapper对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.atguigu.crud.mapper"></property>
    </bean>

<!--    配置一个可以执行批量的sqlSession-->
<!--    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">-->
<!--        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>-->
<!--        <constructor-arg name="executorType" value="BATCH"></constructor-arg>-->
<!--    </bean>-->
</beans>